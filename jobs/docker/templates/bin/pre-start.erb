#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

JOB_NAME=docker

#Make sure folders are ready
RUN_DIR="/var/vcap/sys/run/${JOB_NAME}"
LOG_DIR="/var/vcap/sys/log/${JOB_NAME}"
for dir in $RUN_DIR $LOG_DIR ; do
  mkdir -p ${dir}
  chown -R vcap:vcap ${dir}
  chmod 755 ${dir}
done

# Set ulimits
export DOCKER_ULIMIT_NOFILE=<%= p('ulimit_nofile') %>
ulimit -n ${DOCKER_ULIMIT_NOFILE}

# Set vm.max_map_count
export DOCKER_VM_MAX_MAP_COUNT=<%= p('vm.max_map_count') %>
[ -n "${DOCKER_VM_MAX_MAP_COUNT}" ] && sysctl -w vm.max_map_count=${DOCKER_VM_MAX_MAP_COUNT}

#cgroups mount point settings
if grep -v '^#' /etc/fstab | grep -q cgroup || [ ! -e /proc/cgroups ] || [ ! -d /sys/fs/cgroup ]; then
  mkdir -p /sys/fs/cgroup
fi

if ! mountpoint -q /sys/fs/cgroup; then
  mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup
fi

(
  cd /sys/fs/cgroup
  for sys in $(awk '!/^#/ { if ($4 == 1) print $1 }' /proc/cgroups); do
    mkdir -p $sys
    if ! mountpoint -q $sys; then
      if ! mount -n -t cgroup -o $sys cgroup $sys; then
        rmdir $sys || true
      fi
    fi
  done
)
echo "Successfully set cgroup mount point"

#Add group docker
if ! grep -q "^docker:" /etc/group
  then
    sudo groupadd docker
fi

exit 0
